server:
  port: 3001 # 网关端口
spring:
  application:
    name: gateway # 服务名称
  cloud:
    gateway:
      routes: # 网关路由配置
        - id: cloud-user #路由的ID，没有固定规则但要求唯一，建议配合微服务名
          # uri: http://localhost:1001 # 路由的目标地址（http就是固定地址）
          uri: lb://cloud-user # 路由的目标地址（lb就是负载均衡，后面跟服务名称）
          predicates: # 判断请求是否符合路由规则的条件（路由断言）
            - Path=/user/** # 这个是按照路径匹配，只要以/user/开头就符合要求
            - After=2023-02-10T10:10:10.102+08:00[Asia/Shanghai] # 匹配该断言时间之后的 uri请求
            - Cookie=username,wen    #需要带cookie并且Cookie是username=wen才能访问
            #- Header=X-Request-Id, \d+ #请求头中要有X-Request-Id属性并且值为整数的正则表达式
            #- Host=**.wen.com
            #- Method=GET
            #- Query=username, \d+ #要有参数名称并且是正整数才能路由
          filters: #过滤器配置
            - AddRequestHeader=这是一段请求头! # 添加请求头
      default-filters: #默认过滤器，会对所有的路由请求都生效
        - AddRequestHeader=这是一段请求头! # 添加请求头


        # 上面表示 访问网关http://localhost:3001/user/** 会访问到http://cloud-user/user/**
        # 下面表示 访问网关http://localhost:3001/order/** 会访问到http://cloud-user/order/**

        - id: cloud-order #路由的ID，没有固定规则但要求唯一，建议配合微服务名
          # uri: http://localhost:80 # 路由的目标地址（http就是固定地址）
          uri: lb://cloud-order # 路由的目标地址（lb就是负载均衡，后面跟服务名称）
          predicates: # 判断请求是否符合路由规则的条件（路由断言）
            - Path=/order/** # 这个是按照路径匹配，只要以/user/开头就符合要求

eureka:
  client:
    register-with-eureka: true #表示是否将自己注册进Eurekaserver服务，默认为true。
    fetchRegistry: true #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    service-url:
      defaultZone: http://localhost:2001/eureka # eureka单机服务的地址
  instance:
    instance-id: user1001
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 1 # Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)，开发时设置小些，保证服务关闭后注册中心能即使剔除服务
    lease-expiration-duration-in-seconds: 2 #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务
